package burp;

import BrianW.AKA.BigChan.GUI.PowerTab;
import BrianW.AKA.BigChan.PowerScanner.*;
import BrianW.AKA.BigChan.Tools.Global;

public class BurpExtender implements IBurpExtender {
	@Override
	public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks) {
		// keep a reference to our callbacks object
		//
		// implement IBurpExtender
		//
		// obtain an extension helpers object
		Global.PowerTab = new PowerTab();
		callbacks.addSuiteTab(Global.PowerTab);
		IExtensionHelpers helpers = callbacks.getHelpers();
		// set our extension name
		callbacks.setExtensionName("PowerScanner by Brian.W");
		// register ourselves as a custom scanner check
		IScannerCheck PerRequestScans = new PerRequestScans(callbacks, helpers);
		IScannerCheck PerHostScans = new PerHostScans(callbacks, helpers);
		callbacks.registerScannerCheck(PerRequestScans);
		callbacks.registerScannerCheck(PerHostScans);
		callbacks.printOutput("PowerScanner by Brian.W");
		callbacks.printOutput("Start scanner!");
	}
}

//class PerRequestScans implements IScannerCheck {
//	// test / grep strings
//	private static final byte[] GREP_STRING = "Page generated by:".getBytes();
//	private static final byte[] INJ_TEST = "|".getBytes();
//	private static final byte[] INJ_ERROR = "comment".getBytes();
//	private final IBurpExtenderCallbacks callbacks;
//	private final IExtensionHelpers helpers;
//
//	PerRequestScans(IBurpExtenderCallbacks callbacks, IExtensionHelpers helpers) {
//		this.callbacks = callbacks;
//		this.helpers = helpers;
//	}
//
//	@Override
//	public List<IScanIssue> doPassiveScan(IHttpRequestResponse baseRequestResponse) {
//		return null;
//	}
//
//	@Override
//	public List<IScanIssue> doActiveScan(IHttpRequestResponse baseRequestResponse, IScannerInsertionPoint insertionPoint) {
//		// report the issue
//		List<IScanIssue> issues = new ArrayList<>();
//		issues.add(
//				this.doScanSqli(baseRequestResponse, insertionPoint)
//		);
//		List nullList = new ArrayList();
//		nullList.add(null);
//		issues.removeAll(nullList);
//		return issues;
//	}
//
//	private IScanIssue doScanSqli(IHttpRequestResponse baseRequestResponse, IScannerInsertionPoint insertionPoint) {
//		byte[] resp = baseRequestResponse.getResponse();
//		String baseName = insertionPoint.getInsertionPointName();
//		String InsertionPointType = bytesToHexString(new byte[]{insertionPoint.getInsertionPointType()}, 1);
//		String baseValue = insertionPoint.getBaseValue();
//		String testStr = "";
//		String evilStr = "";
//		callbacks.printOutput("baseName=" + baseName + ", baseValue=" + baseValue);
//		String baseType = baseValue.matches("[0-9]+") ? "int" : "string";
////		if (baseValue.matches("[0-9]+") && baseName.length()<5 && baseName.contains("id")){
//		if (baseType.equals("int")) {
//			testStr = "/1";
//			evilStr = "/0";
//		} else {
//			testStr = "''";
//			evilStr = "'";
//		}
//
//		byte[] reqTest = insertionPoint.buildRequest((baseValue + testStr).getBytes());
//		IHttpRequestResponse pairTrue = callbacks.makeHttpRequest(
//				baseRequestResponse.getHttpService(),
//				reqTest
//		);
//		byte[] respTrue = pairTrue.getResponse();
//
//		byte[] reqEvil = insertionPoint.buildRequest((baseValue + evilStr).getBytes());
//		IHttpRequestResponse pairEvil = callbacks.makeHttpRequest(
//				baseRequestResponse.getHttpService(),
//				reqEvil
//		);
//		byte[] respEvil = pairEvil.getResponse();
//		hitRst hit = _hit(resp, respTrue, respEvil, testStr, evilStr);
//		if (hit.getCdoe() > 0) {
//			callbacks.printOutput("sqli found in param: " + baseName + " with type " + baseType + " ;InsertionPointType:" + InsertionPointType);
//			// get the offsets of the payload within the request, for in-UI highlighting
////			List<int[]> requestHighlights_origin = new ArrayList<>(1);
////			requestHighlights_origin.add(insertionPoint.getPayloadOffsets(baseValue.getBytes()));
//			return _raise(
//					"sqli found",
//					String.format("param: %s <br>" +
//									"type: %s <br>" +
//									"InsertionPointType: %s <br>" +
//									"HitCode: %s <br><br>" +
//									"compareRestEvil SAME: <br>%s<br>" +
//									"compareRestEvil Different: <br>%s<br>"
//							,
//							baseName,
//							baseType,
//							InsertionPointType,
//							hit.getCdoe(),
//							hit.getCompareWithRespEvil_Same(),
//							hit.getCompareWithRespEvil_Diff()
//					),
//					//"sqli found in param: " + baseName + " ;param type " + baseType + " ;found by :" + hit + " ;InsertionPointType:" + InsertionPointType,
//					"High",
//					baseRequestResponse,
//					pairTrue,
//					pairEvil
//			);
////			return new CustomScanIssue(
////					baseRequestResponse.getHttpService(),
////					helpers.analyzeRequest(baseRequestResponse).getUrl(),
////					new IHttpRequestResponse[] {callbacks.applyMarkers(baseRequestResponse, requestHighlights, matches) },
////					"sqli found in param: " + baseName + " ;param type " + baseType + " ;found by :" + hit + " ;InsertionPointType:" + InsertionPointType,
////					"sqli found",
////					"High");
//		}
//		return null;
//	}
//
//
//	private IScanIssue doCommandInj(IHttpRequestResponse baseRequestResponse, IScannerInsertionPoint insertionPoint) {
//		byte[] resp = baseRequestResponse.getResponse();
//		String baseName = insertionPoint.getInsertionPointName();
//		String InsertionPointType = bytesToHexString(new byte[]{insertionPoint.getInsertionPointType()}, 1);
//		String baseValue = insertionPoint.getBaseValue();
//		String testStr = "";
//		String evilStr = "";
//		callbacks.printOutput("baseName=" + baseName + ", baseValue=" + baseValue);
//		String baseType = baseValue.matches("[0-9]+") ? "int" : "string";
////		if (baseValue.matches("[0-9]+") && baseName.length()<5 && baseName.contains("id")){
//		if (baseType.equals("int")) {
//			testStr = "/1";
//			evilStr = "/0";
//		} else {
//			testStr = "''";
//			evilStr = "'";
//		}
//
//		byte[] reqTest = insertionPoint.buildRequest((baseValue + testStr).getBytes());
//		IHttpRequestResponse pairTrue = callbacks.makeHttpRequest(
//				baseRequestResponse.getHttpService(),
//				reqTest
//		);
//		byte[] respTrue = pairTrue.getResponse();
//
//		byte[] reqEvil = insertionPoint.buildRequest((baseValue + evilStr).getBytes());
//		IHttpRequestResponse pairEvil = callbacks.makeHttpRequest(
//				baseRequestResponse.getHttpService(),
//				reqEvil
//		);
//		byte[] respEvil = pairEvil.getResponse();
//		hitRst hit = _hit(resp, respTrue, respEvil, testStr, evilStr);
//		if (hit.getCdoe() > 0) {
//			callbacks.printOutput("sqli found in param: " + baseName + " with type " + baseType + " ;InsertionPointType:" + InsertionPointType);
//			// get the offsets of the payload within the request, for in-UI highlighting
////			List<int[]> requestHighlights_origin = new ArrayList<>(1);
////			requestHighlights_origin.add(insertionPoint.getPayloadOffsets(baseValue.getBytes()));
//			return _raise(
//					"sqli found",
//					String.format("param: %s <br>" +
//									"type: %s <br>" +
//									"InsertionPointType: %s <br>" +
//									"HitCode: %s <br><br>" +
//									"compareRestEvil SAME: <br>%s<br>" +
//									"compareRestEvil Different: <br>%s<br>"
//							,
//							baseName,
//							baseType,
//							InsertionPointType,
//							hit.getCdoe(),
//							hit.getCompareWithRespEvil_Same(),
//							hit.getCompareWithRespEvil_Diff()
//					),
//					//"sqli found in param: " + baseName + " ;param type " + baseType + " ;found by :" + hit + " ;InsertionPointType:" + InsertionPointType,
//					"High",
//					baseRequestResponse,
//					pairTrue,
//					pairEvil
//			);
////			return new CustomScanIssue(
////					baseRequestResponse.getHttpService(),
////					helpers.analyzeRequest(baseRequestResponse).getUrl(),
////					new IHttpRequestResponse[] {callbacks.applyMarkers(baseRequestResponse, requestHighlights, matches) },
////					"sqli found in param: " + baseName + " ;param type " + baseType + " ;found by :" + hit + " ;InsertionPointType:" + InsertionPointType,
////					"sqli found",
////					"High");
//		}
//		return null;
//	}
//
//	private CustomScanIssue _raise(String title, String desc, String sev, IHttpRequestResponse... Pairs) {
//		IHttpService service = Pairs[0].getHttpService();
//		URL url = helpers.analyzeRequest(Pairs[0]).getUrl();
//		title = "[PowerScanner by Brian.W]: " + title;
////		IHttpRequestResponse[] finalPair = new IHttpRequestResponse[]{
////				basePair,
////				Pairs
////		};
//		return new CustomScanIssue(
//				service,
//				url,
//				Pairs,
//				title,
//				desc,
//				sev);
//	}
//
//	hitRst _hit(byte[] resp, byte[] respTrue, byte[] respEvil, String testStr, String evilStr) {
//		int resp_statusCode = helpers.analyzeResponse(resp).getStatusCode();
//		int respTrue_statusCode = helpers.analyzeResponse(respTrue).getStatusCode();
//		int respEvil_statusCode = helpers.analyzeResponse(respEvil).getStatusCode();
//		IResponseVariations ResponseVariations1 = helpers.analyzeResponseVariations(resp, respTrue);
//		IResponseVariations ResponseVariations2 = helpers.analyzeResponseVariations(resp, respEvil);
//		StringBuilder compareWithRespEvil_Diff = new StringBuilder();
//		StringBuilder compareWithRespEvil_Same = new StringBuilder();
//		for (String VariantAttribute : ResponseVariations2.getVariantAttributes()) {
//			compareWithRespEvil_Diff.append(String.format("%s : %s vs %s<br>",
//					VariantAttribute,
//					ResponseVariations2.getAttributeValue(VariantAttribute, 0),
//					ResponseVariations2.getAttributeValue(VariantAttribute, 1)
//			));
////			callbacks.printOutput("resp and respEvil has VariantAttribute = " + VariantAttribute + "; "
////					+ ResponseVariations2.getAttributeValue(VariantAttribute, 0) + " vs "
////					+ ResponseVariations2.getAttributeValue(VariantAttribute, 1)
////			);
//		}
//		for (String InvariantAttribute : ResponseVariations2.getInvariantAttributes()) {
//			compareWithRespEvil_Same.append(String.format("%s : %s vs %s<br>",
//					InvariantAttribute,
//					ResponseVariations2.getAttributeValue(InvariantAttribute, 0),
//					ResponseVariations2.getAttributeValue(InvariantAttribute, 1)
//			));
////			callbacks.printOutput("resp and respEvil has InvariantAttribute = " + InvariantAttribute + "; "
////					+ ResponseVariations2.getAttributeValue(InvariantAttribute, 0) + " vs "
////					+ ResponseVariations2.getAttributeValue(InvariantAttribute, 1)
////			);
//		}
//		if (resp_statusCode == respTrue_statusCode && resp_statusCode != respEvil_statusCode) {
//			return new hitRst(1, compareWithRespEvil_Diff.toString(), compareWithRespEvil_Same.toString());
//		}
//		int resp_ErrorCount = countStr(Arrays.toString(resp), "error");
//		int respTrue_ErrorCount = countStr(Arrays.toString(respTrue), "error");
//		int respEvil_ErrorCount = countStr(Arrays.toString(respEvil), "error");
//		if (resp_ErrorCount == respTrue_ErrorCount && respTrue_ErrorCount != respEvil_ErrorCount) {
//			return new hitRst(2, compareWithRespEvil_Diff.toString(), compareWithRespEvil_Same.toString());
//		}
//		String respTrue_pure = Arrays.toString(respTrue).replace(testStr, "").replace(evilStr, "");
//		//callbacks.printOutput("respTrue_pure=" + respTrue_pure);
//		String respEvil_pure = Arrays.toString(respEvil).replace(evilStr, "").replace(testStr, "");
//		//callbacks.printOutput("respEvil_pure=" + respEvil_pure);
//
//		//去除payload后，如果test返回和Evil返回一样，无漏洞
//		if (respTrue_pure.equals(respEvil_pure)) {
//			return new hitRst(0, compareWithRespEvil_Diff.toString(), compareWithRespEvil_Same.toString());
//		}
//
////		callbacks.printOutput(Integer.toString(ResponseVariations2.getAttributeValue("whole_body_content", 0)));
//
//		//如果test包和原始包不一样，无漏洞
//		if (ResponseVariations1.getVariantAttributes().contains("initial_body_content") ||
//				ResponseVariations1.getVariantAttributes().contains("content_type")
//		) {
//			return new hitRst(0, compareWithRespEvil_Diff.toString(), compareWithRespEvil_Same.toString());
//		}
//		//如果evil包和原始包一样，无漏洞
//		if (ResponseVariations2.getInvariantAttributes().contains("whole_body_content")
//				|| ResponseVariations2.getInvariantAttributes().contains("content_length")
////				|| ResponseVariations2.getInvariantAttributes().contains("visible_text")
//		) {
//			return new hitRst(0, compareWithRespEvil_Diff.toString(), compareWithRespEvil_Same.toString());
//		}
//		int length1 = ResponseVariations1.getAttributeValue("content_length", 1) - ResponseVariations2.getAttributeValue("content_length", 0);
//		int length2 = ResponseVariations2.getAttributeValue("content_length", 1) - ResponseVariations2.getAttributeValue("content_length", 0);
//		callbacks.printOutput("respTrueLength - respLength=" + Integer.toString(length1));
//		callbacks.printOutput(Integer.toString(testStr.length()));
//		callbacks.printOutput("respEvilLength - respLength=" + Integer.toString(length2));
//		callbacks.printOutput(Integer.toString(evilStr.length()));
//		if (length1 / testStr.length() == length2 / evilStr.length()) {
//			return new hitRst(0, compareWithRespEvil_Diff.toString(), compareWithRespEvil_Same.toString());
//		}
//
//		if (ResponseVariations1.getInvariantAttributes() != ResponseVariations2.getInvariantAttributes()
//				&&
//				ResponseVariations1.getAttributeValue("content_length", 1) != ResponseVariations2.getAttributeValue("content_length", 1)
//		) {
//			return new hitRst(3, compareWithRespEvil_Diff.toString(), compareWithRespEvil_Same.toString());
//		}
//		return new hitRst(0, compareWithRespEvil_Diff.toString(), compareWithRespEvil_Same.toString());
//	}
//
//	@Override
//	public int consolidateDuplicateIssues(IScanIssue existingIssue, IScanIssue newIssue) {
//		return 0;
//	}
//
//	// helper method to search a response for occurrences of a literal match string
//	// and return a list of start/end offsets
//	private List<int[]> getMatches(byte[] response, byte[] match) {
//		List<int[]> matches = new ArrayList<int[]>();
//
//		int start = 0;
//		while (start < response.length) {
//			start = helpers.indexOf(response, match, true, start, response.length);
//			if (start == -1)
//				break;
//			matches.add(new int[]{start, start + match.length});
//			start += match.length;
//		}
//
//		return matches;
//	}
//
//	/**
//	 * @param str     原字符串
//	 * @param sToFind 需要查找的字符串
//	 * @return 返回在原字符串中sToFind出现的次数
//	 */
//	private int countStr(String str, String sToFind) {
//		int num = 0;
//		while (str.contains(sToFind)) {
//			str = str.substring(str.indexOf(sToFind) + sToFind.length());
//			num++;
//		}
//		return num;
//	}
//
//	/**
//	 * convert byte[] to HexString
//	 *
//	 * @param bArray
//	 * @param length
//	 * @return
//	 */
//	public static String bytesToHexString(byte[] bArray, int length) {
//		StringBuffer sb = new StringBuffer(length);
//		String sTemp;
//		for (int i = 0; i < length; i++) {
//			sTemp = Integer.toHexString(0xFF & bArray[i]);
//			if (sTemp.length() < 2)
//				sb.append(0);
//			sb.append(sTemp.toUpperCase());
//		}
//		return sb.toString();
//	}
//
//
//}
//
////class hitRst {
////	private int cdoe;
////	private String compareWithRespEvil_Same;
////	private String compareWithRespEvil_Diff;
////
////	public hitRst(
////			int hitCode,
////			String compareWithRespEvil_Diff,
////			String compareWithRespEvil_Same
////
////	) {
////		this.cdoe = hitCode;
////		this.compareWithRespEvil_Same = compareWithRespEvil_Same;
////		this.compareWithRespEvil_Diff = compareWithRespEvil_Diff;
////	}
////
////	public int getCdoe() {
////		return cdoe;
////	}
////
////	public void setCdoe(int cdoe) {
////		this.cdoe = cdoe;
////	}
////
////	public String getCompareWithRespEvil_Same() {
////		return compareWithRespEvil_Same;
////	}
////
////	public hitRst setCompareWithRespEvil_Same(String compareWithRespEvil_Same) {
////		this.compareWithRespEvil_Same = compareWithRespEvil_Same;
////		return this;
////	}
////
////	public String getCompareWithRespEvil_Diff() {
////		return compareWithRespEvil_Diff;
////	}
////
////	public hitRst setCompareWithRespEvil_Diff(String compareWithRespEvil_Diff) {
////		this.compareWithRespEvil_Diff = compareWithRespEvil_Diff;
////		return this;
////	}
////}
//
//
//class CustomScanIssue implements IScanIssue {
//	private IHttpService httpService;
//	private URL url;
//	private IHttpRequestResponse[] httpMessages;
//	private String name;
//	private String detail;
//	private String severity;
//
//	public CustomScanIssue(
//			IHttpService httpService,
//			URL url,
//			IHttpRequestResponse[] httpMessages,
//			String name,
//			String detail,
//			String severity) {
//		this.httpService = httpService;
//		this.url = url;
//		this.httpMessages = httpMessages;
//		this.name = name;
//		this.detail = detail;
//		this.severity = severity;
//	}
//
//	@Override
//	public URL getUrl() {
//		return url;
//	}
//
//	@Override
//	public String getIssueName() {
//		return name;
//	}
//
//	@Override
//	public int getIssueType() {
//		return 0;
//	}
//
//	@Override
//	public String getSeverity() {
//		return severity;
//	}
//
//	@Override
//	public String getConfidence() {
//		return "Certain";
//	}
//
//	@Override
//	public String getIssueBackground() {
//		return null;
//	}
//
//	@Override
//	public String getRemediationBackground() {
//		return null;
//	}
//
//	@Override
//	public String getIssueDetail() {
//		return detail;
//	}
//
//	@Override
//	public String getRemediationDetail() {
//		return null;
//	}
//
//	@Override
//	public IHttpRequestResponse[] getHttpMessages() {
//		return httpMessages;
//	}
//
//	@Override
//	public IHttpService getHttpService() {
//		return httpService;
//	}
//
//}
//
//
